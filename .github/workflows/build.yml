name: Cross-Platform Build

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.settings.host }}
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: macos-latest
            target: x86_64-apple-darwin
            strip: strip -x *.node
          - host: macos-latest
            target: aarch64-apple-darwin
            strip: strip -x *.node
          - host: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            strip: strip *.node
          - host: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            setup: |
              export DEBIAN_FRONTEND=noninteractive
              sudo apt-get update -y
              sudo apt-get install -y gcc-aarch64-linux-gnu
            strip: aarch64-linux-gnu-strip *.node

    name: Build ${{ matrix.settings.target }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 18
          check-latest: true
          cache: npm
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: ${{ matrix.settings.target }}
      
      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            .cargo-cache
            target/
          key: ${{ matrix.settings.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Setup toolchain
        run: ${{ matrix.settings.setup }}
        if: ${{ matrix.settings.setup }}
        shell: bash
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build
        run: npx napi build --platform --release --target ${{ matrix.settings.target }}
        shell: bash
      
      - name: Strip debug symbols
        run: ${{ matrix.settings.strip }}
        if: ${{ matrix.settings.strip }}
        shell: bash
      
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: bindings-${{ matrix.settings.target }}
          path: "*.node"
          if-no-files-found: error

  publish:
    name: Publish
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - uses: actions/checkout@v4
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 18
          check-latest: true
          cache: npm
      - name: Install dependencies
        run: npm ci
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: Prepare packages for publishing
        run: npx napi pre-publish
      - name: List packages
        run: ls -R ./npm
        shell: bash
      - name: Publish
        run: |
          npm config set provenance true
          echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
          
          if git log -1 --pretty=%B | grep "^[0-9]\+\.[0-9]\+.*"; then
            echo "Publishing release packages..."
            # Publish main package
            npm publish --access public
            
            # Publish platform-specific packages
            for dir in npm/*/; do
              if [ -d "$dir" ]; then
                echo "Publishing $(basename "$dir")..."
                cd "$dir"
                npm publish --access public
                cd ../..
              fi
            done
          elif git log -1 --pretty=%B | grep "^[0-9]\+\.[0-9]\+.*-alpha"; then
            echo "Publishing alpha packages..."
            # Publish main package as alpha
            npm publish --tag alpha --access public
            
            # Publish platform-specific packages as alpha  
            for dir in npm/*/; do
              if [ -d "$dir" ]; then
                echo "Publishing $(basename "$dir") as alpha..."
                cd "$dir"
                npm publish --tag alpha --access public
                cd ../..
              fi
            done
          else
            echo "Not a release, skipping publish"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

